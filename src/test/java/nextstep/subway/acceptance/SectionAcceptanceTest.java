package nextstep.subway.acceptance;

import org.junit.jupiter.api.DisplayName;

@DisplayName("지하철 구간 관리 기능")
public class SectionAcceptanceTest extends AcceptanceTest {

    /**
     * given 구간 데이터 생성
     *  노선에 속하면서 상행 종점인 역 생성, 노선에 속하면서 하행 종점인 역 생성, 노선에 속하지 않은 역 생성
     *  이하 상행역, 하행역, 새로운 역
     */


    /**
     * given 하행역으로 상행 종점이면서, 새로운 역으로 하행 종점인 구간 데이터 생성
     * when 구간 데이터 생성 요청
     * then 구간 데이터 생성 완료
     */

    /**
     * given 하행역으로 상행 종점이면서, 상행역으로 하행 종점인 구간 데이터 생성
     * when 구간 데이터 생성 요청
     * then 구간 데이터 생성 에러 (새로운 구간의 하행역은 해당 노선에 등록되어있는 역일 수 없다.)
     */

    /**
     * given 상행역으로 상행 종점이면서, 새로운 역으로 구간 데이터 생성
     * when 구간 데이터 생성 요청
     * then 구간 데이터 생성 에러 (새로운 구간의 상행역은 해당 노선에 등록되어있는 하행 종점역이어야 한다.)
     */

    /**
     * given 상행역으로 상행 종점이면서, 하행 역으로 구간 데이터 생성
     * when 구간 데이터 생성 요청
     * then 구간 데이터 생성 에러 (새로운 구간의 상행역은 해당 노선에 등록되어있는 하행 종점역이어야 한다.)
     * then 구간 데이터 생성 에러 (새로운 구간의 하행역은 해당 노선에 등록되어있는 역일 수 없다.)
     */

    /**
     * given 새로운 역으로 상행 종점이면서, 상행 역으로 구간 데이터 생성
     * when 구간 데이터 생성 요청
     * then 구간 데이터 생성 에러 (새로운 구간의 상행역은 해당 노선에 등록되어있는 하행 종점역이어야 한다.)
     * then 구간 데이터 생성 에러 (새로운 구간의 하행역은 해당 노선에 등록되어있는 역일 수 없다.)
     */

    /**
     * given 새로운 역으로 상행 종점이면서, 하행 역으로 구간 데이터 생성
     * when 구간 데이터 생성 요청
     * then 구간 데이터 생성 에러 (새로운 구간의 상행역은 해당 노선에 등록되어있는 하행 종점역이어야 한다.)
     * then 구간 데이터 생성 에러 (새로운 구간의 하행역은 해당 노선에 등록되어있는 역일 수 없다.)
     */
}
